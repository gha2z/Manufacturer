@using IntrManApp.Shared.Contract
@using IntrManHybridApp.UI.Services
@using Mapster

@inject IProductService service
@inject Radzen.DialogService dialogService
@inject Radzen.NotificationService notificationService
@inject ILogger<ProductVariantMod> logger

<RadzenTemplateForm TItem="ProductVariantRequest" Data=@variant Submit=@Save>
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenCard>
            <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack>
                    <RadzenStack JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenFormField Text="Measurement Unit" Style="width:65%" >
                            <RadzenDropDown Data="@measurementUnits" @bind-Value="@variant.MeasurementUnitId" ValueProperty="Id" TextProperty="Name"
                            Name="MeasurementUnit" />
                        </RadzenFormField>
                        <RadzenFormField Text="Weight" Style="width:35%">
                            <RadzenNumeric @bind-Value="@variant.Weight" Name="Weight" Min="1"/>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenStack>

                <RadzenStack>
                    <RadzenStack JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        
                        <RadzenFormField Text="Description" Style="width:65%">
                            <RadzenTextBox @bind-Value="@variant.Caption" Name="Description" />
                        </RadzenFormField>
                        <RadzenFormField Text="SKU" Style="width:35%">
                            <RadzenTextBox MaxLength="16" Name="Sku" @bind-Value="@variant.Sku" />
                        </RadzenFormField>
                    </RadzenStack>
                    <RadzenRequiredValidator Component="Sku" Text="SKU is required!" />

                </RadzenStack>

                <RadzenStack>
                    <RadzenStack JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenFormField Text="Standard Cost">
                            <RadzenNumeric Min="0" Max="999999999999" Name="Cost" @bind-Value="@variant.StandardCost" Format="N2"  />
                        </RadzenFormField>
                        <RadzenFormField Text="List Price">
                            <RadzenNumeric Min="0" Max="999999999999" Name="Price" @bind-Value="@variant.ListPrice" Format="N2" />
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Flat" Text="Save" Style="width: 120px" />
            <RadzenButton Click="@((args) => dialogService.Close(null))" Variant="Variant.Flat" Text="Close" Style="width: 120px" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>


@code
{
    [Parameter]
    public ProductVariantRequest variant { get; set; }

    [Parameter]
    public Guid groupId { get; set; }

    List<MeasurementUnitRequest> measurementUnits = [];

    protected override async Task OnInitializedAsync()
    {
        //notificationService.Notify(NotificationSeverity.Info, "Getting Measurement Units", $"Group Id => \"{groupId}\"");
        measurementUnits = await service.GetMeasurementUnitsByGroupIdAsync(groupId);
        logger.LogInformation($"Getting Measurement Units by GroupId \"{groupId}\" => {measurementUnits.Count}");
    }

    void Save()
    {
        try
        {
            variant.MeasurementUnit = measurementUnits.First(m => m.Id.Equals(variant.MeasurementUnitId));
            dialogService.Close(variant);
        } catch(Exception ex)
        {
             notificationService.Notify(NotificationSeverity.Error, "Error", ex.Message);
        }
        
    }

}
