@page "/SupplierList"

@using IntrManApp.Shared.Contract
@using System.Diagnostics
@using System.Text.Json
@using IntrManHybridApp.UI.Services

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ISupplierService service
@inject ILogger<SupplierList> logger


<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true"
                PageSize="25" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                Data="@items" @bind-Value="@selectedItems" Density="Density.Compact">
    <HeaderTemplate>
         <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="New Supplier" Click="@NewItem"/>
    </HeaderTemplate>
    <Columns>
       
        <RadzenDataGridColumn Property="Name" Title="Name" Width="150px" Frozen="true" />
        <RadzenDataGridColumn Property="IsActive" Title="Status" Width="100px">
            <Template Context="data">
                @((data.IsActive) ? "Active" : "Inactive")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="BusinessEntityId" Title="Business Entity Id" Width="100px" />
        <RadzenDataGridColumn Context="item" Width="50px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="item">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                Click="@(args => EditItem(item))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteItem(item))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    IEnumerable<SupplierResponse> items = [];
    IList<SupplierResponse> selectedItems = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitData();
    }

    async Task InitData()
    {
        try
        {
            logger.LogInformation("SupplierList.InitData - get supplier list");
            items = await service.GetSuppliersAsync();
            if (items.ToList().Count > 0)
            {
                selectedItems = new List<SupplierResponse>() { items.First() };
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"InitData - Error: {ex.Message}{Environment.NewLine}{ex}");
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 10000,
                    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Failed to load data</RadzenText>,
                    DetailContent = ns =>
                        @<RadzenText>
                            <br /><br />Please make sure the connection to the server is available.
                            <br /><br />Technical detail:
                            <br />@ex.Message
                        </RadzenText>
    });
        }
    }

    async Task NewItem()
    {
        logger.LogInformation("SupplierList.NewItem - open new supplier dialog");

        var res = await DialogService.OpenAsync<SupplierMod>("New Supplier",
              new Dictionary<string, object>() { { "Id", Guid.Empty } },
              new DialogOptions() { Width = "700px", Height = "312px", Resizable = true, Draggable = true });

        await InitData();
    }

    async Task DeleteItem(SupplierResponse item)
    {

        if (items.Contains(item))
        {

            try
            {
                logger.LogInformation($"SupplierList - delete supplier {item.BusinessEntityId}");
                var succeed = await service.DeleteSupplierAsync(item.BusinessEntityId);
                if (succeed)
                {
                    items = items.Where(x => x.BusinessEntityId != item.BusinessEntityId);
                    selectedItems = (items.Count()>0) ? new List<SupplierResponse>() { items.First() } : [];
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Duration = 10000,
                        SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Failed to remove this item.</RadzenText>,
                        DetailContent = ns => @<RadzenText TextStyle="TextStyle.Body1">Please make sure this item has not been used in transactions</RadzenText>
                    });
                };

              
            }
            catch (Exception ex)
            {
                logger.LogError($"SupplierList.DeleteItem {item.BusinessEntityId} - Error: {ex.Message}{Environment.NewLine}{ex}");
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 10000,
                    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Failed to remove this item.</RadzenText>,
                    DetailContent = ns =>
                        @<RadzenText>
                            <br />Please make sure the connection to the server is available.
                            <br /><br />Technical detail:
                            <br />@ex.Message
                        </RadzenText>
                });
            };
        }
    }

    async Task EditItem(SupplierResponse item)
    {
        logger.LogInformation($"SupplierList.EditItem {item.BusinessEntityId} - Opening SupplierMod dialog service");

        await DialogService.OpenAsync<SupplierMod>("New Supplier",
            new Dictionary<string, object>() { { "Id", item.BusinessEntityId } },
            new DialogOptions() { Width = "700px", Height = "312px", Resizable = true, Draggable = true });

        await InitData();
    }

    

}
