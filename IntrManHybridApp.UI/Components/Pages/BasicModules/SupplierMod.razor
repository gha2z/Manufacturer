@page "/SupplierMod/{id:guid?}"

@using IntrManApp.Shared.Contract
@inject Radzen.DialogService dialogService
@inject Radzen.NotificationService notificationService
@inject IHttpClientFactory HttpClientFactory

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack>
        <RadzenFormField Text="Supplier Name">
            <RadzenTextBox @bind-Value="@name" />
        </RadzenFormField>
        <RadzenSelectBar @bind-Value=@value TValue="bool" class="mb-5">
            <Items>
                <RadzenSelectBarItem Text="Active" Value="true" />
                <RadzenSelectBarItem Text="In-active" Value="false" />
            </Items>
        </RadzenSelectBar>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="Save" Variant="Variant.Flat" Text="Save" Style="width: 120px" />
        <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Flat" Text="Close" Style="width: 120px" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter] public Guid Id { get; set; }
    string name = "";
    bool value = true;

    protected override async Task OnInitializedAsync()
    {
        if(Id != null && Id != Guid.Empty)
        {
            using var client = HttpClientFactory.CreateClient("BackendAPI");
            var response = await client.GetFromJsonAsync<SupplierResponse>($"suppliers/{Id}");
            if (response != null)
            {
                name = response.Name;
                value = response.IsActive;
            }
        };
       
        await base.OnInitializedAsync();
    }

    async Task Save()
    {
        if (Id != null && Id != Guid.Empty)
        {
            var item = new UpdateSupplierRequest() { BusinessEntityId = Id, Name = name, IsActive = value };
            using var client = HttpClientFactory.CreateClient("BackendAPI");
            var response = await client.PutAsJsonAsync("suppliers", item);
            if (response.IsSuccessStatusCode)
            {
                dialogService.Close(true);
            }
            else
            {
                notificationService.Notify(
                    new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Error, 
                        Summary = "Error", 
                        Detail = "Failed to save supplier" });
            }
        }
        else
        {
            var item = new CreateSupplierRequest() { Name = name, IsActive = value };
            using var client = HttpClientFactory.CreateClient("BackendAPI");
            var response = await client.PostAsJsonAsync("suppliers", item);
            if (response.IsSuccessStatusCode)
            {
                dialogService.Close(true);
            }
            else
            {
                notificationService.Notify(
                    new NotificationMessage 
                    { 
                        Severity = NotificationSeverity.Error, 
                        Summary = "Error", 
                        Detail = "Failed to save supplier" });
            }
        }
    }
}
