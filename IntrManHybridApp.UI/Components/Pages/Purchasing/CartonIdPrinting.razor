@page "/CartonIdPrinting/{id:guid?}"

@using IntrManApp.Shared.Contract
@using IntrManApp.Shared.Contract.Tools
@using IntrManHybridApp.UI.Services
@using System.Diagnostics
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Radzen.Blazor
@using System.Text
@using Newtonsoft.Json


@inject ICheckinService service
@inject ILogger<CartonIdPrinting> logger
@inject ILabelPrintingService labelPrintingService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@implements IAsyncDisposable

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="20" AllowPaging="true" 
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or"
    SelectionMode="DataGridSelectionMode.Multiple" AllowRowSelectOnRowClick="true" HideGroupedColumn="true"
    TItem="ProductCheckInLineDetailResponse" Data="@items" @bind-Value="@selectedItems" Density="Density.Compact"
    Render="@OnRender" >

    <GroupHeaderTemplate>
        @(context.Data.Items.Cast<ProductCheckInLineDetailResponse>().First().ProductName), 
        Total Batches: @(context.Data.Items.Cast<ProductCheckInLineDetailResponse>().First().TotalBatches)
    </GroupHeaderTemplate>

    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenDropDown Data=@printers Placeholder="Select Printer" 
                Style="width: 400px" @bind-Value=@selectedPrinter />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="print"
                Text="Print Labels" Click="@(args => PrintLabels())" />
        </RadzenStack>
    </HeaderTemplate>    

    <Columns>
        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" 
                    InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                    Value="@(selectedItems == null || selectedItems?.Any() != true ? false : 
                        !items.All(i => selectedItems.Contains(i)) ? null : items.Any(i => selectedItems.Contains(i)))"
                    Change="@(args => selectedItems = args == true ? items.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool"
                    Value="@(selectedItems != null && selectedItems.Contains(data))" 
                    InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="LineId" Title="Line ID" />
        <RadzenDataGridColumn Property="BatchNumber" Title="Carton Id"/>
        <RadzenDataGridColumn Property="Quantity" Title="Weight">
            <Template Context="data">
                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", data.Quantity)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="ProductionDate" Title="Production Date">
            <Template Context="data">
                @data.ProductionDate.ToString("MM/dd/yyyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="ExpirationDate" Title="Expiry Date">
            <Template Context="data">
                @data.ExpirationDate.ToString("MM/dd/yyyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="LocationName" Title="Location" />
        <RadzenDataGridColumn Property="RackingPalletName" Title="Racking" />
    </Columns>

</RadzenDataGrid>

@code {
    [Parameter]
    public Guid Id { get; set; } 

    IEnumerable<ProductCheckInLineDetailResponse> items = [];
    IList<ProductCheckInLineDetailResponse> selectedItems = [];
    List<string>? printers;
    string? selectedPrinter;
    HubConnection? hubConnection;
    string signalrMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"CartonIdPrinting.OnInitializedAsync - get raw materials - checkin id:{Id}");
        items = await service.GetCheckinRawMaterials(Id);
        await base.OnInitializedAsync();

        await CreateHubConnection();

    }

    void OnRender(DataGridRenderEventArgs<ProductCheckInLineDetailResponse> args)
    {
        if (args.FirstRender)
        {
            logger.LogInformation($"CartonIdPrinting.OnRender - raw materials grouping based on Line ID");
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "LineId", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }

    async Task PrintLabels()
    {
        // IEnumerable<string> messages = await labelPrintingService.PrintCartonIds(selectedItems, selectedPrinter);
        // StringBuilder allMessages = new StringBuilder();
        // foreach (var message in messages)
        // {
        //     allMessages.AppendLine($"{message}\n");
        // }
        // NotificationService.Notify(NotificationSeverity.Info, "Carton ID Label Printing", allMessages.ToString());

        string filename = "rCartonLabel.btw";
        var path = Path.Combine(Environment.GetFolderPath(
            Environment.SpecialFolder.CommonApplicationData), $"{AppInfo.Name}");
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        path = Path.Combine(path, "labels");
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        var sourcePath = Path.Combine(path, "cartonIds.json");
        var labelPath = Path.Combine(path, filename);

        // if (!File.Exists(labelPath))
        // {
        //     logger.LogError($"LabelPrintingService - Label file not found, create one ...");
            using Stream inputStream = await FileSystem.Current.OpenAppPackageFileAsync(filename);

            // Create an output filename
            string targetFile = labelPath;

            // Copy the file to the AppDataDirectory
            using FileStream outputStream = File.Create(targetFile);
            await inputStream.CopyToAsync(outputStream);
        //}

        logger.LogInformation($"LabelPrintingService - generating json file:{sourcePath}");
        var json = System.Text.Json.JsonSerializer.Serialize(items);
        await File.WriteAllTextAsync(sourcePath, json);

        if (hubConnection is not null)
        {


            var arguments = new PrintArguments(labelPath, selectedPrinter);
            var request = System.Text.Json.JsonSerializer.Serialize(
                new AppMessage(AppMessageType.PrintLabel, arguments));

            await hubConnection.SendAsync("SendMessage", "CartonIdPrinting", request);
        }
    }

    async Task CreateHubConnection()
    {
        try
        {
            logger.LogInformation($"CartonIdPrinting.CreateHubConnection - create connection to SignalR hub");
            hubConnection = new HubConnectionBuilder()
               .WithUrl("http://localhost:39500/chathub")
               .WithAutomaticReconnect()
               .Build();

            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                signalrMessage = message;
                try
                {
                    AppMessage? msg = Newtonsoft.Json.JsonConvert.DeserializeObject<AppMessage>(message);

                    switch (msg?.MessageType)
                    {
                        case AppMessageType.InstalledPrinterList:
                            var list = (Newtonsoft.Json.Linq.JArray)msg?.Data;

                            printers = list.ToObject<List<string>>();
                            InvokeAsync(StateHasChanged);
                            logger.LogInformation($"CartonIdPrinting.CreateHubConnection - receiving printer list {printers?.Count} items");
                            break;
                        case AppMessageType.PrintLabelResult:
                            NotificationService.Notify(NotificationSeverity.Success,
                                "Print Result", msg.Data?.ToString() ?? string.Empty, 3950);
                            break;
                    }
                }                 
                catch (Exception ex)
                {
                    logger.LogError(ex, $"CartonIdPrinting.ReceiveMessage - error: {ex.Message}{Environment.NewLine}{ex}");
                }
            });

            if (hubConnection is not null)
            {
                await hubConnection.StartAsync();

                var request = System.Text.Json.JsonSerializer.Serialize(
                    new AppMessage(AppMessageType.GetInstalledPrinterList, null));
                await hubConnection.SendAsync("SendMessage", "CartonIdPrinting", request);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"CartonIdPrinting.OnInitializedAsync - error: {ex.Message}{Environment.NewLine}{ex}");
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

  
}
