@using System.Diagnostics
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Radzen.Blazor
@using System.Text
@using Newtonsoft.Json
@using IntrManApp.Shared.Contract
@using IntrManApp.Shared.Contract.Tools
@using Mapster

@inject ILogger<LabelPrintDialog> logger
@implements IAsyncDisposable
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Vertical">
        <RadzenLabel>Label Type</RadzenLabel>

        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenCheckBox @bind-Value="@productionSticker" Name="ckProductionSticker"/>
            <RadzenLabel Text="Production Sticker" Component="ckProductionSticker"/>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenLabel Visible="@productionSticker">Number of copies</RadzenLabel>
            <RadzenNumeric Visible="@productionSticker" Min="1" @bind-Value="@numCopies" Step="1" Max="99" Style="width:80px" />
        </RadzenStack>
        
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenCheckBox @bind-Value="@productLabel" Name="ckProductLabel"/>
            <RadzenLabel Text="Product Label" Component="ckProductLabel"/>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenLabel Visible="@productLabel">Number of copies</RadzenLabel>
            <RadzenNumeric Visible="@productLabel" Min="1" @bind-Value="@numCopiesLbl" Step="1" Max="99" Style="width:80px" />
        </RadzenStack>

        <RadzenLabel>Printer</RadzenLabel>
        <RadzenDropDown Data=@printers Placeholder="Select Printer"
                        Style="width: 320px" @bind-Value=@selectedPrinter />
   
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="print"
                  Text="Print" Click="@(args => PrintLabels())" />
</RadzenStack>

@code {
    [Parameter]
    public IList<ProductionItem> selectedItems { get; set; } = [];

    HubConnection? hubConnection;
    string signalrMessage = string.Empty;

    bool productionSticker = true;
    bool productLabel = true;

    List<string>? printers;
    string? selectedPrinter;
    int numCopies = 1;
    int numCopiesLbl = 1;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

        await CreateHubConnection();

    }

    async Task PrintLabels()
    {
        string json = string.Empty;
        if (productionSticker)
        {
            List<ProductionItem> items = []; 
            foreach(var item in selectedItems)
            {
                for (int i = 0; i < numCopies; i++)
                {
                    var newItem = item.Adapt<ProductionItem>();
                    newItem.BatchIndex = i+1;
                    newItem.TotalBatches = numCopies;
                    items.Add(newItem);
                }
            };
            json = System.Text.Json.JsonSerializer.Serialize(items);
            await Print("BatchLabel.btw", json, "productionOrder.json", "ProductionLabelPrinting");
        }
        if (productLabel)
        {
            List<ProductCheckInLineDetailResponse> items= [];
            foreach(var item in selectedItems)
            {
                for (int i = 0; i < numCopiesLbl; i++)
                {
                    items.Add(new()
                        {
                            LineId = item.LineId,
                            BatchNumber = item.BatchNumber,
                            ProductName = item.ProductName,
                            Quantity = item.QuantityPerBatch,
                            MeasurementUnitName = item.ProductMeasurementUnitName,
                            ProductionDate = item.ProductionDate,
                            ExpirationDate = item.ExpirationDate
                        });
                }
                json = System.Text.Json.JsonSerializer.Serialize(items);
            };
            await Print("rCartonLabel.btw", json, "cartonIds.json", "CartonIdPrinting");
        }
    }

    async Task Print(string filename, string jsonSource, string jsonSourceFilename, string PrintMessage)
    {
        var path = Path.Combine(Environment.GetFolderPath(
            Environment.SpecialFolder.CommonApplicationData), $"{AppInfo.Name}");
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        path = Path.Combine(path, "labels");
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        var sourcePath = Path.Combine(path, jsonSourceFilename);
        var labelPath = Path.Combine(path, filename);

        if (!File.Exists(labelPath))
        {
            logger.LogError($"LabelPrintingService - Label file not found, create one ...");
            using Stream inputStream = await FileSystem.Current.OpenAppPackageFileAsync(filename);

            // Create an output filename
            string targetFile = labelPath;

            // Copy the file to the AppDataDirectory
            using FileStream outputStream = File.Create(targetFile);
            await inputStream.CopyToAsync(outputStream);
        }

        logger.LogInformation($"LabelPrintingService - generating json file:{sourcePath}");
        await File.WriteAllTextAsync(sourcePath, jsonSource);

        if (hubConnection is not null)
        {
            var arguments = new PrintArguments(labelPath, selectedPrinter);
            var request = System.Text.Json.JsonSerializer.Serialize(
                new AppMessage(AppMessageType.PrintLabel, arguments));

            await hubConnection.SendAsync("SendMessage", PrintMessage, request);
        }
    }

    async Task CreateHubConnection()
    {
        try
        {
            logger.LogInformation($"ProductionLabelPrinting.CreateHubConnection - create connection to SignalR hub");
            hubConnection = new HubConnectionBuilder()
               .WithUrl("http://localhost:50000/chathub")
               .WithAutomaticReconnect()
               .Build();

            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                signalrMessage = message;
                try
                {
                    AppMessage? msg = Newtonsoft.Json.JsonConvert.DeserializeObject<AppMessage>(message);

                    switch (msg?.MessageType)
                    {
                        case AppMessageType.InstalledPrinterList:
                            var list = (Newtonsoft.Json.Linq.JArray)msg?.Data;

                            printers = list.ToObject<List<string>>();
                            InvokeAsync(StateHasChanged);
                            logger.LogInformation($"ProductionLabelPrinting.CreateHubConnection - receiving printer list {printers?.Count} items");
                            break;
                        case AppMessageType.PrintLabelResult:
                            NotificationService.Notify(NotificationSeverity.Success,
                                "Print Result", msg.Data?.ToString() ?? string.Empty, 5000);
                            break;
                    }
                }
                catch (Exception ex)
                {
                    logger.LogError(ex, $"ProductionLabelPrinting.ReceiveMessage - error: {ex.Message}{Environment.NewLine}{ex}");
                }
            });

            if (hubConnection is not null)
            {
                await hubConnection.StartAsync();

                var request = System.Text.Json.JsonSerializer.Serialize(
                    new AppMessage(AppMessageType.GetInstalledPrinterList, null));
                await hubConnection.SendAsync("SendMessage", "ProductionLabelPrinting", request);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"ProductionLabelPrinting.OnInitializedAsync - error: {ex.Message}{Environment.NewLine}{ex}");
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}
