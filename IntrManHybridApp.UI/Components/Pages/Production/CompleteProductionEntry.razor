@page "/CompleteProductionEntry"

@using IntrManApp.Shared.Contract
@using System.Diagnostics
@using System.Text.Json
@using IntrManHybridApp.UI.Services
@using Mapster

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IProductionService service
@inject ILocationService locationService
@inject ILogger<ProductionOrder> logger

 <RadzenCard Style="margin-bottom:10px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Darker" class="rz-shadow-0">
            @caption
            <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="@true" Text="@captionExt" class="rz-ml-2" />
        </RadzenButton>
        <RadzenProgressBarCircular Visible="@isSaving" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
            <Template>Saving</Template>
        </RadzenProgressBarCircular>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Click="@Save" />
            <RadzenButton Text="Clear" ButtonStyle="ButtonStyle.Danger" Click="@Clear" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>
<RadzenCard>

    <RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1.5rem">
            <RadzenFormField Text="Checkin Date">
                <RadzenDatePicker DateFormat="MM/dd/yyyy HH:mm" @bind-Value="@checkin.CheckInDate" Name="checkinDate" ShowTime="true" />
            </RadzenFormField>

        </RadzenStack>

        <RadzenStack>
            <RadzenDataGrid Data="@checkin.ProductInternalCheckinLines" TItem="FinishedProductInternalCheckinLineRequest" ColumnWidth="200px"
             RowRender="@RowRender" RowExpand="RowExpand" @ref=@dataGrid>

                <Template Context="item">
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@item.FinishedPackagedProducts">
                      
                        <Columns>
                            <RadzenDataGridColumn Title="Packaging" Width="180px">
                                <Template Context="pack">
                                    @($"{pack.ProductVariant.Weight:N2} {pack.ProductVariant.MeasurementUnit.Initial}")
                                </Template>
                              
                            </RadzenDataGridColumn>
                        
                            <RadzenDataGridColumn Property="Quantity" Title="Quantity" Width="100px">
                                <Template Context="pack">
                                    @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", pack.Quantity)
                                </Template>
                                
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn Property="Location.Name" Title="Location" Width="130px"></RadzenDataGridColumn>

                            <RadzenDataGridColumn Property="RackingPallet.ColRow" Title="Rack" Width="100px"></RadzenDataGridColumn>
                           
                        </Columns>
                    </RadzenDataGrid>
                </Template>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline"
                                  Text="New Item" Click="@(args => NewItem())" />
                </HeaderTemplate>
                <Columns>

                    <RadzenDataGridColumn Property="BatchNumber" Title="Batch Number" Width="100px" Frozen="true" TextAlign="TextAlign.Center">
                      
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="FinishedProduct.Names" Title="Item" Width="230px">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="Quantity" Title="Batch Size (kg)" Width="80px">
                        <Template Context="product">
                            @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", product.Quantity)
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="ExpiryDate" Title="Expiry Date" Width="100px">
                        <Template Context="product">
                            @product.ExpiryDate?.ToString("MM/dd/yyyy")
                        </Template>
                        
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                                          Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="100px">
                        <Template Context="product">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(product))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(product))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>

                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenStack>
</RadzenCard> 


@code 
{
    FinishedProductInternalCheckinRequest checkin = new() { CheckInDate = DateTime.Now };
    RadzenDataGrid<FinishedProductInternalCheckinLineRequest> dataGrid;

    string caption = "End Products Checkin";
    string captionExt = "0";
    bool isSaving = false;
    bool isAddNew = false;

    async Task Save()
    {
        isSaving = true;
        try {
            await service.CreateFinishedProductCheckin(checkin);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "End Product Checkin saved successfully");
            Clear();
        } catch (Exception ex) {
            NotificationService.Notify(NotificationSeverity.Error, "Error", ex.Message);
        } finally {
            isSaving = false;
        }
    }

    void Clear()
    {
        checkin = new() { CheckInDate = DateTime.Now };
    }

    async Task EditRow(FinishedProductInternalCheckinLineRequest product)
    {
        var dialogResult =
            await DialogService.OpenAsync<EditFinishedProductCheckinLine>(
                "Edit End Product Checkin Item",
                options:
                    new DialogOptions()
                        {
                            Width = "1096px",
                            Height = "640px"
                        },
                parameters:
                    new Dictionary<string, object>
                        {
                            { "Line", product }
                        }
            );

        if (dialogResult != null && dialogResult is FinishedProductInternalCheckinLineRequest)
        {
            product = dialogResult;
            await dataGrid.Reload();
        }
    }

        async Task DeleteRow(FinishedProductInternalCheckinLineRequest product) {
            var dialogResult = await DialogService.Confirm("Are you sure you want to delete this item?", "Delete Item");
            if (dialogResult.Value) {
                checkin.ProductInternalCheckinLines.Remove(product);
            }
        }

    async Task NewItem()
    {
        var dialogResult =
            await DialogService.OpenAsync<EditFinishedProductCheckinLine>(
                "New End Product Checkin Item", options: new DialogOptions()
                    {
                        Width = "1096px",
                        Height = "640px"
                    });

        // NotificationService.Notify(NotificationSeverity.Info, $"dialogResult==null => {dialogResult==null}\n" +
        // $"dialogResult is Finshed... => {dialogResult is FinishedProductInternalCheckinLineRequest}");
        if (dialogResult != null && dialogResult is FinishedProductInternalCheckinLineRequest)
        {
            checkin.ProductInternalCheckinLines.Add(dialogResult);
            await dataGrid.Reload();
            // StateHasChanged();
            // NotificationService.Notify(NotificationSeverity.Info, $"Lines count: {checkin.ProductInternalCheckinLines.Count}");
        }
    }

    void RowRender(RowRenderEventArgs<FinishedProductInternalCheckinLineRequest> args)
    {
        args.Expandable = true; // args.Data.BomCount>0;
    }

    void RowExpand(FinishedProductInternalCheckinLineRequest line)
    {
        
    }
}
