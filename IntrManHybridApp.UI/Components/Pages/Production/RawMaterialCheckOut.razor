@page "/RawMaterialCheckOut"

@using IntrManApp.Shared.Contract
@using System.Diagnostics
@using System.Text.Json
@using IntrManHybridApp.UI.Services
@using Mapster
`
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IProductionService service
@inject ILocationService locationService
@inject ILogger<RawMaterialCheckOut> logger
@inject IJSRuntime JSRuntime

<RadzenCard Style="margin-top:-48px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Start">
            <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" class="rz-shadow-0">
                @caption
                <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="@true" Text="@captionExt" class="rz-ml-2" />
            </RadzenButton>
            <RadzenText Style="margin-top:6px; margin-right:0px;"><small><strong>Show Raw Materials</strong></small></RadzenText>
            <RadzenSwitch @bind-Value=@showProducts Style="margin-top:12px; margin-left:0px" />
        </RadzenStack>

        <RadzenProgressBarCircular Visible="@isSaving" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
            <Template>Saving</Template>
        </RadzenProgressBarCircular>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Click="@Save" />
            <RadzenButton Text="Clear" ButtonStyle="ButtonStyle.Danger" Click="@Clear" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

 <RadzenSplitter Orientation="Orientation.Horizontal" style="border: 0px solid rgba(0,0,0,.08); margin-top:12px; background-color:white">

    <RadzenSplitterPane Size="50%" Min="470px" Max="550px" Collapsed="@(!showProducts)">        
        <RadzenCard Visible="@showProducts" Variant="Variant.Flat">
            <RadzenDataGrid Data="@rawMaterials" TItem="InventoryItemDetail" @ref="invGrid"
                AllowSorting="true" AllowPaging="true" PageSize="13" AllowFiltering="true" SelectionMode="DataGridSelectionMode.Multiple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowColumnResize="true"
                            @bind-Value="@selectedInventories"  RowDoubleClick="@InsertInvItem">
                <HeaderTemplate>
                    <RadzenButton Click="@InsertInvItem" Icon="playlist_add" Text="Insert selected items" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="ExpiryDate" Title="Exp. Date" FormatString="{0:d}" Width="110px"/>
                    <RadzenDataGridColumn Property="BatchNumber" Title="Carton Id" Width="90px" />
                    <RadzenDataGridColumn Property="Names" Title="Item" Width="160px">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Quantity" Title="Weight (gr)" Width="110px" >
                        <Template Context = "item">
                            @item.Quantity.ToString("N2")
                        </Template> 
                    </RadzenDataGridColumn>
                </Columns> 
            </RadzenDataGrid>   
        </RadzenCard>
    </RadzenSplitterPane>

    <RadzenSplitterPane Collapsible="false">
        <RadzenCard Variant="Variant.Flat">

        <RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1.5rem">
                <RadzenFormField Text="Checkout Date">
                    <RadzenDatePicker DateFormat="MM/dd/yyyy HH:mm" @bind-Value="@checkout.CheckoutDate" Name="checkoutDate" ShowTime="true" />
                </RadzenFormField>
             
            </RadzenStack>

            <RadzenStack>
                <RadzenDataGrid @ref="rawMaterialsGrid" Data="@checkout.ProductCheckoutDetail" 
                TItem="ProductCheckOutDetailRequest" RowUpdate="@OnUpdateRow" 
                RowCreate="@OnRowCreate" ColumnWidth="200px" 
                EditMode="DataGridEditMode.Single" RowEdit="@OnRowEdit">
                    <Columns>

                        <RadzenDataGridColumn Property="BatchNumber" Title="Carton ID" Width="100px" Frozen="true" TextAlign="TextAlign.Center">
                            <EditTemplate Context="item" >
                               @*  <RadzenDropDown @bind-Value="raw.InventoryId" Data="@rawMaterials" TextProperty="BatchNumber" ValueProperty="InventoryId"
                                                Style="width:100%" AllowClear="true" AllowFiltering="true" ClearSearchAfterSelection="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@(args => ItemChanged(raw))" /> *@
                                <RadzenTextBox @bind-Value="item.BatchNumber" Change="@(args => ItemValidated(item))" Placeholder="Scan Carton Id" 
                                    Style="width:100%;font-size:small" @ref=@BatchTextBox TabIndex="0" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="RawMaterial.Names" Title="Item" Width="230px" />

                        <RadzenDataGridColumn Property="Quantity" Title="Batch Size (gr)" Width="80px">
                            <Template Context="raw">
                                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", raw.Quantity)
                            </Template>
                        </RadzenDataGridColumn>

                      

                    <RadzenDataGridColumn Property="Location.Name" Title="Location" Width="130px">
                            <EditTemplate Context="item">
                                <RadzenDropDown @bind-Value="item.LocationId" Data="@locations" TextProperty="Name" ValueProperty="Id"
                                    @ref=@locationDropDown Style="width:100%" AllowClear="true" AllowFiltering="true" ClearSearchAfterSelection="true"
                                            Change="@(args => ItemValidated(item))" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="RackingPallet.ColRow" Title="Rack" Width="100px">
                            <EditTemplate Context="item"> 
                                <RadzenDropDown @bind-Value="item.RackingPalletId" Data="@rackingPallets" TextProperty="ColRow"
                                    @ref=@rackingPalletDropDown ValueProperty="Id" Style="width:100%" AllowClear="true" AllowFiltering="true"
                                    ClearSearchAfterSelection="true" Change="@(args => ItemValidated(item))"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Context="raw" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                                              Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="100px">
                            <Template Context="raw">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(raw))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(raw))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="raw">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(raw))">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(raw))">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(raw))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    </RadzenSplitterPane>
</RadzenSplitter> 

@code {
    RadzenDataGrid<ProductCheckOutDetailRequest> rawMaterialsGrid = new();
    RadzenDataGrid<InventoryItemDetail> invGrid = new();

    ProductCheckOutRequest checkout = new() { CheckoutDate = DateTime.Now };
    IEnumerable<ProductCheckOutDetailRequest> checkoutItems = [];
    ProductCheckOutDetailRequest? tmpItem;

    IEnumerable<InventoryItemDetail> rawMaterials = [];
    IList<InventoryItemDetail> selectedInventories = [];

    IEnumerable<LocationResponse> locations = [];
    IEnumerable<RackingPalletResponse> rackingPallets = [];

    string caption = "New Raw Materials Checkout";
    string captionExt = "0";
    bool isSaving = false;
    bool isAddNew = false;
    bool showProducts = true;
    bool fromInvGrid = false;

    RadzenDropDown<Guid>? locationDropDown;
    RadzenDropDown<Guid>? rackingPalletDropDown;
    RadzenTextBox? BatchTextBox;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        locations = await locationService.GetLocationsAsync();
        rackingPallets = await locationService.GetRackingPalletsAsync();
        rawMaterials = await service.GetRawMaterialsForProductionAsync();
        await InsertRow();
    }

    async void InsertInvItem()
    {
        if (selectedInventories.Count == 0) return;
        fromInvGrid = true;
        foreach (var item in selectedInventories)
        {
            if (checkout.ProductCheckoutDetail.FirstOrDefault(p => p.BatchNumber.Equals(item.BatchNumber)) == null)
            {
                var newItem = new ProductCheckOutDetailRequest() { BatchNumber = item.BatchNumber };
                ItemValidated(newItem);
                checkout.ProductCheckoutDetail.Add(newItem);
            }
        }
        await rawMaterialsGrid.Reload();
        fromInvGrid = false;
        await InsertRow();
    }

    void LocationChanged(ProductCheckOutDetailRequest item)
    {
        // var str = $"Item.LocationId={item.LocationId} - Item.Location?.Id={item.Location?.Id} - " +
        //     $"Item.rawMaterial.LocationId={item.RawMaterial?.LocationId} - Item.rawMaterial.Location?.Id={item.RawMaterial?.LocationId}" + 
        //     $"Item.BatchNumber={item.BatchNumber} - Item.Qty={item.Quantity}";
        // JSRuntime.InvokeVoidAsync("alert", str);
        if (item.LocationId != Guid.Empty)
        {
            item.Location = locations.FirstOrDefault(p => p.Id == item.LocationId);
            ItemValidated(item);
        }
    }

    void RackingChanged(ProductCheckOutDetailRequest item)
    {
        // var str = $"Item.LocationId={item.LocationId} - Item.Location?.Id={item.Location?.Id} - " +
        //     $"Item.rawMaterial.LocationId={item.RawMaterial?.LocationId} - Item.rawMaterial.Location?.Id={item.RawMaterial?.LocationId}" +
        //     $"Item.BatchNumber={item.BatchNumber} - Item.Qty={item.Quantity}";
        // JSRuntime.InvokeVoidAsync("alert", str);
        if (item.RackingPalletId != Guid.Empty)
        {
            item.RackingPallet = rackingPallets.FirstOrDefault(p => p.Id == item.RackingPalletId);
            ItemValidated(item);
        }
    }

    bool ItemValidated(ProductCheckOutDetailRequest item)
    {
        bool validated = false;
        logger.LogInformation($"ItemChanged/Validated Raised ...");
        InventoryItemDetail? raw = null;
        if (!string.IsNullOrEmpty(item.BatchNumber))
        {
            if(checkout.ProductCheckoutDetail.Any(p=>p.BatchNumber.ToLower().Trim().Equals(item.BatchNumber.Trim().ToLower()) && p!=item))
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Carton ID already exists");
                if (!isAddNew && tmpItem != null) item.BatchNumber = tmpItem.BatchNumber; 
                return false;
            };
            raw = rawMaterials.FirstOrDefault(p => p.BatchNumber.ToLower().Trim().Equals(item.BatchNumber.Trim().ToLower()));
            if (raw != null)
            {
                item.UnitMeasurementId = raw.MeasurementUnitId;
                item.Quantity = raw.Quantity;
                item.InventoryId = raw.InventoryId;
                item.RawMaterial = raw;
                if(item.LocationId==Guid.Empty) item.LocationId = raw.LocationId;
                if(item.RackingPalletId==Guid.Empty) item.RackingPalletId = raw.RackingPalletId;
                
                if(item.LocationId==Guid.Empty) 
                    locationDropDown?.Element.FocusAsync();
                else 
                    item.Location = locations.FirstOrDefault(p => p.Id == item.LocationId);

                if(item.RackingPalletId == Guid.Empty) 
                    rackingPalletDropDown?.Element.FocusAsync();
                else 
                    item.RackingPallet = rackingPallets.FirstOrDefault(p => p.Id == item.RackingPalletId);
            }
        }
        validated = raw != null && item.LocationId != Guid.Empty && item.RackingPalletId != Guid.Empty;
        logger.LogInformation($"Validation result => {validated}");
        if (validated && isAddNew) SaveRow(item);
        return (validated);
    }

    async Task InsertRow()
    {
        logger.LogInformation("Inserting new row");
        var newItem = new ProductCheckOutDetailRequest();
        isAddNew = true;
        await rawMaterialsGrid.InsertRow(newItem);
        
    }

    void OnRowEdit(ProductCheckOutDetailRequest item)
    {
        logger.LogInformation($"OnRowEdit '{item.RawMaterial?.Names ?? string.Empty}'");
        BatchTextBox?.Element.FocusAsync();
    }


    void OnRowCreate(ProductCheckOutDetailRequest item)
    {
        logger.LogInformation($"OnRowCreate");
        if (item.InventoryId != Guid.Empty)
        {
            logger.LogInformation($"OnRowCreate ... Adding row to collection '{item.RawMaterial?.Names ?? string.Empty}'");
            checkout.ProductCheckoutDetail.Add(item);
            captionExt = $"({checkout.ProductCheckoutDetail.Count})";
        }
        else
        {
            logger.LogInformation($"Items NOT Validated ... Cancelling Edit '{item.RawMaterial?.Names ?? string.Empty}'");
            rawMaterialsGrid.CancelEditRow(item);
        }
    }



    async Task EditRow(ProductCheckOutDetailRequest item)
    {
        isAddNew = false;
        logger.LogInformation($"Editing row - collection count:'{checkout.ProductCheckoutDetail.Count}");
        tmpItem = item.Adapt<ProductCheckOutDetailRequest>();
        await rawMaterialsGrid.EditRow(item);
        logger.LogInformation($"Editing row '{item.RawMaterial?.Names ?? string.Empty}' EditMode:{rawMaterialsGrid.IsRowInEditMode(item)}");
        logger.LogInformation($"Editing row - collection count:'{checkout.ProductCheckoutDetail.Count}" +
            $"{Environment.NewLine}===> grid.Count:{rawMaterialsGrid.Count}");
        await rawMaterialsGrid.Reload();
        await rawMaterialsGrid.EditRow(item);
    }

    void OnUpdateRow(ProductCheckOutDetailRequest item)
    {
       

        if (ItemValidated(item))
        {
            logger.LogInformation($"Items Validated ...  '{item.RawMaterial?.Names ?? string.Empty}'");
        }
        else
        {
            logger.LogInformation($"Items NOT Validated ... Cancelling Edit and re-enter edit mode '{item.RawMaterial?.Names ?? string.Empty}'");
            rawMaterialsGrid.CancelEditRow(item);
            if(tmpItem!=null) item = tmpItem.Adapt<ProductCheckOutDetailRequest>();
            rawMaterialsGrid.EditRow(item);
        }

        // logger.LogInformation($"Adding row to collection '{item.RawMaterial?.Names ?? string.Empty}'");
    }

    async Task DeleteRow(ProductCheckOutDetailRequest item)
    {
        logger.LogInformation($"delete row - orderg if the row exists '{item.RawMaterial?.Names ?? string.Empty}'");
        if (checkout.ProductCheckoutDetail.Contains(item))
        {
            logger.LogInformation("deleting row");
            checkout.ProductCheckoutDetail.Remove(item);
            await rawMaterialsGrid.Reload();
            captionExt = $"({checkout.ProductCheckoutDetail.Count})";
            await InsertRow();
        }
    }

    async void CancelEdit(ProductCheckOutDetailRequest item)
    {
        logger.LogInformation($"Cancelling Edit '{item.RawMaterial?.Names ?? string.Empty}'");
        rawMaterialsGrid.CancelEditRow(item);
        await InsertRow();
    }

    async void SaveRow(ProductCheckOutDetailRequest item)
    {
        logger.LogInformation($"Save Row '{item.RawMaterial?.Names ?? string.Empty}'");
        if (item.InventoryId == Guid.Empty || item.LocationId == Guid.Empty || item.RackingPalletId == Guid.Empty) return;
        await rawMaterialsGrid.UpdateRow(item);
        await InsertRow();
    }

    async void Clear ()
    {

        checkout.ProductCheckoutDetail.Clear();
        await rawMaterialsGrid.Reload();
        await InsertRow();
        captionExt = "";
    }

    async Task Save()
    {
        Guid response = Guid.Empty;
        if (checkout.ProductCheckoutDetail.Count == 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "No items to save");
            return;
        };
        
        var json = JsonSerializer.Serialize(checkout);
        logger.LogInformation($"Saving Raw Materials Checkout:{Environment.NewLine}{json}");
        isSaving = true;
        response = await service.CreateRawMaterialsCheckout(checkout);

        if (response != Guid.Empty)
        {
            NotificationService.Notify(NotificationSeverity.Success,
                "Transaction Saved", "Raw Material checkout has been saved successfully");
            Clear();
            
            isSaving = false;
            rawMaterials = await service.GetRawMaterialsForProductionAsync();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Success,
                "Oooppss ...", "Failed to save checkout");
            isSaving = false;
        }
    }





}
