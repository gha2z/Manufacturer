@page "/ProductionStatus/{id:guid?}"

@using IntrManApp.Shared.Contract
@using IntrManApp.Shared.Contract.Tools
@using IntrManHybridApp.UI.Services
@using System.Diagnostics
@using System.Text.Json
@using Radzen.Blazor
@using System.Text
@using Newtonsoft.Json


@inject IProductionService service
@inject ILogger<ProductionStatus> logger
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="20" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Multiple" AllowRowSelectOnRowClick="true" HideGroupedColumn="true"
                TItem="ProductionItem" Data="@items" @bind-Value="@selectedItems" style="background-color:ghostwhite"
                RowRender="@RowRender" RowExpand="RowExpand">

    <Template Context="item">
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="20" AllowPaging="true"
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or"
                        SelectionMode="DataGridSelectionMode.Multiple" AllowRowSelectOnRowClick="true" HideGroupedColumn="true"
                        Data="item.BomAllocations" Density="Density.Compact" TItem="BomAllocationResponse"
                        Render="@OnRender">

            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenLabel Style=@GetBomStyle(item) Text=@($"Bill of Materials Allocation ({item.ResourceAllocated}%)") />
                </RadzenStack>
            </HeaderTemplate>

            <GroupHeaderTemplate>
                <b>@(context.Data.Items.Cast<BomAllocationResponse>().First().RawMaterialNames)</b>,
                Required:
                <b>
                    @($"{context.Data.Items.Cast<BomAllocationResponse>().First().WeightRequired:N2} " +
                        $"{(context.Data.Items.Cast<BomAllocationResponse>().First().BomMeasurementUnitInitial)}")
                </b>
            </GroupHeaderTemplate>

            <Columns>
                <RadzenDataGridColumn Property="BatchNumber" Title="Carton Id" />
                <RadzenDataGridColumn Property="RawMaterialNames" Title="Raw Material" />
                <RadzenDataGridColumn Property="ProductionDate" Title="ProductionDate" FormatString="{0:d}" />
                <RadzenDataGridColumn Property="ExpirationDate" Title="Expiry Date" FormatString="{0:d}" />
                <RadzenDataGridColumn Property="CheckOutDate" Title="Checkout Date" FormatString="{0:d}" />
                <RadzenDataGridColumn Property="WeightAllocated" Title="Weight Allocated" TextAlign="TextAlign.Right">
                    <Template Context="data">
                        @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2} {1}",
                                 data.WeightAllocated, data.WeightAllocatedMeasurementUnitInitial)
                    </Template>
                    <GroupFooterTemplate>
                        Total: <b>
                            <small>
                                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2} {1}",
                                         context.Data.Items.Cast<BomAllocationResponse>().Sum(o => o.WeightAllocated),
                                         context.Data.Items.Cast<BomAllocationResponse>().First().WeightAllocatedMeasurementUnitInitial)
                            </small>
                        </b>
                    </GroupFooterTemplate>
                </RadzenDataGridColumn>


            </Columns>

        </RadzenDataGrid>
    </Template>

    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" Style="padding:5px;border:thin" AlignItems="AlignItems.Stretch">
            <RadzenCard Visible="@( Id==Guid.Empty ? true : false )" Variant="Variant.Filled">
                Production Date
                <RadzenDatePicker @bind-Value=@selectedDate Style="width: 200px" ShowTime=false DateFormat="MMM/dd/yyyy" 
                     CurrentDateChanged="@OnScheduleDateChanged"/>
            </RadzenCard>
            <RadzenCard Variant="Variant.Filled">
                <RadzenStack JustifyContent="JustifyContent.End">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Icon="print" Text="Print Labels" 
                        Click="@(args => OpenPrintDialog())" />
                </RadzenStack>

            </RadzenCard>
        </RadzenStack>
    </HeaderTemplate>

    <Columns>
        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                Value="@(selectedItems == null || selectedItems?.Any() != true ? false :
                        !items.All(i => selectedItems.Contains(i)) ? null : items.Any(i => selectedItems.Contains(i)))"
                                Change="@(args => selectedItems = args == true ? items.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool"
                                Value="@(selectedItems != null && selectedItems.Contains(data))"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="ProductName" Title="Product" />
        <RadzenDataGridColumn Property="BatchNumber" Title="Batch Number" />
        <RadzenDataGridColumn Property="QuantityPerBatch" Title="Weight (kgs)">
            <Template Context="data">
                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", data.QuantityPerBatch)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="ResourceAllocated" Title="Resource Allocated">
            <Template Context="data">
                <RadzenLabel  Style=@GetBomStyle(data)>
                    @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}%", data.ResourceAllocated)
                </RadzenLabel> 
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Flag" Title="Status">
            <Template Context="data">
                <RadzenLabel style=@statusColorMap[data.Flag]>@statusMap[data.Flag]</RadzenLabel>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Filterable="false" Sortable="false" Width="80px">
            <Template Context="data">
                <RadzenButton Visible="@(data.Flag==5)"
                              ButtonStyle="ButtonStyle.Success" Shade="Shade.Lighter" Icon="not_started"
                              Click="@(async => StartProduction(data))" />
                <RadzenButton Visible="@(data.Flag==5)"
                              ButtonStyle="ButtonStyle.Warning" Shade="Shade.Lighter" Icon="delete_forever"
                              Click="@(async => AbortProduction(data))" />
            </Template>
        </RadzenDataGridColumn>
     
    </Columns>

</RadzenDataGrid>

@code {
    [Parameter]
    public Guid Id { get; set; }

    IEnumerable<ProductionItem> items = [];
    IList<ProductionItem> selectedItems = [];

    DateTime selectedDate;
    bool isLoadingBom = false;

    Dictionary<byte, string> statusMap = new Dictionary<byte, string>
    {
        { 4, "Aborted"},
        { 5, "Not Started" },
        { 6, "In Progress" },
        { 7, "Completed" },
        { 8, "Checkin From Production"},
        { 9, "Dispatch Order"},
        { 10, "Packing"},
        { 11, "Packed"},
        { 12, "Dispatched"}
    };
    Dictionary<byte, string> statusColorMap = new Dictionary<byte, string>
    {
        { 4, "color:darkred"},
        { 5, "color:dimgrey" },
        { 6, "color:goldenrod" },
        { 7, "color:limegreen" },
        { 8, "color:darkorange" },
        { 9, "color:darkorange" },
        { 10, "color:darkorange" },
        { 11, "color:darkorange" },
        { 12, "color:darkorange" }
    };


    void RowRender(RowRenderEventArgs<ProductionItem> args)
    {
        args.Expandable = true; // args.Data.BomCount>0;
    }

    void RowExpand(ProductionItem item)
    {

        isLoadingBom = true;

        try
        {
            logger.LogInformation($"ProductList.RowExpand - Get BOM for product {item.InventoryId}");
            item.BomAllocations = service.GetBomAllocation(item.InventoryId);
            // NotificationService.Notify(NotificationSeverity.Success, "BOM Allocation",
            //     $"BOM Allocation for {item.InventoryId} loaded successfully {item.BomAllocations.Count()}");
        }
        catch (Exception ex)
        {
            logger.LogError($"ProductList.RowExpand - Error getting BOM for product {item.InventoryId}");
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 10000,
                    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Failed to remove this item.</RadzenText>,
            DetailContent = ns =>
    @<RadzenText>
        <br />Please make sure the connection to the server is available.
        <br /><br />Technical detail:
        <br />@ex.Message
    </RadzenText>
            });
        };
        isLoadingBom = false;
        //}
    }

    void OnRender(DataGridRenderEventArgs<BomAllocationResponse> args)
    {
        try
        {
            if (args.FirstRender)
            {
                logger.LogInformation($"BOMAllocation.OnRender - raw materials grouping based on RawMaterialNames");
                args.Grid.Groups.Add(new GroupDescriptor() { Property = "RawMaterialNames", SortOrder = SortOrder.Ascending });
                StateHasChanged();
            }
        }
        catch
        {
            
        }

    }

    string GetBomStyle(ProductionItem data)
    {
        if (data.ResourceAllocated < 100)
            return "color:red";
        else
            return "color:green";
    }

    async Task OpenPrintDialog()
    {
        await DialogService.OpenSideAsync<LabelPrintDialog>("Print Label", 
            new Dictionary<string, object> { { "selectedItems", selectedItems } },
            options: new SideDialogOptions { CloseDialogOnOverlayClick = false, Position = DialogPosition.Right, ShowMask = true});
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();

    }

    async Task LoadData()
    {
        logger.LogInformation($"ProductionLabelPrinting.OnInitializedAsync - production order - id:{Id}");
        if (Id != Guid.Empty)
        {
            items = await service.GetProductionOrderItemsAsync(Id);
        }
        else
        {
            selectedDate = DateTime.Now;
            items = await service.GetProductionOrderItemsByDateAsync(selectedDate);
        }
    }

    async Task OnScheduleDateChanged(DateTime args)
    {
        selectedDate = args;
        items = await service.GetProductionOrderItemsByDateAsync(selectedDate);
        selectedItems = [];
    }

    async Task AbortProduction(ProductionItem item)
    {
        if(item.Flag!=5)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Forbidden", 
                "This production can't be aborted. Only unstarted production can be aborted.");
            return;
        };
        var ok = await service.AbortItemProduction(item.InventoryId);
        if (ok)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Production aborted", "Production aborted successfully");
            await LoadData();
            selectedItems = [];
        }
    }

    async Task StartProduction(ProductionItem item)
    {
        if (item.ResourceAllocated < 100)
        {
            var dialogResult =
                await DialogService.Confirm(
                    "Insufficient raw materials checked out for this production. Continue anyway?",
                    "Resource Allocation",
                    new ConfirmOptions
                        {
                            OkButtonText = "Yes",
                            CancelButtonText = "No",
                            Top = "10px",
                            Left = "5px",
                            AutoFocusFirstElement = true
                        });

            if ((dialogResult.HasValue && !dialogResult.Value) || !dialogResult.HasValue)
                return;
        };
        var ok = await service.StartItemProduction(item.InventoryId);
        if (ok)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Production Started", "Production started successfully");
            await LoadData();
            selectedItems = [];
        }
    }
}
